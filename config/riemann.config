;; -*- mode: clojure; -*-
;;
;; sample configuration for Kiries


(logging/init {:file "logs/kiries.log"})

(tcp-server)
(udp-server)

;;(ws-server)

;; uncomment to enable Riemann's REPL server.
;; (repl-server)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start ES Integration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require '[riemann.elastic :as elastic])

;; we must make our ES client connection first
(elastic/es-connect "http://localhost:9200")

;; Load up some index mappings that optimize for time-series data
(elastic/load-index-template "logstash" "config/logstash-mapping.json")
(elastic/load-index-template "jvm_metrics" "config/jvm-metrics-mapping.json")

;; JVM metrics for Kiries process
(include "jvm-metrics.config")

;; Example handler for riemann-health events
(include "riemann-health.config")

;; by default we dump all events, except riemann internal events and
;; JVM events, to a single "logstash-YYYY-MM-DD" index
;;
;; You will likely want to remove, or modify, this if you have
;; specific handlers for your data, otherwise it will be replicated
;; here!
(streams
 (where (and (not (service #"^riemann"))
             (not (service #"^kiries.jvm")))
        (rollup 1 5 (elastic/es-index "kiries"
                                      :timestamping :day
                                      :index "logstash"))))




